{"version":3,"file":"static/js/762.1bc5f637.chunk.js","mappings":"qOAEaA,EAAmBC,EAAAA,GAAAA,QAAH,6F,8BCFhBC,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEnBC,EAAmB,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EAExBC,EAAW,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EAEhBC,EAAe,SAAAP,GAAK,OAAIA,EAAMC,SAASO,SAAnB,E,UCJpBC,EAAmBX,EAAAA,GAAAA,IAAH,oJAQhBY,EAAYZ,EAAAA,GAAAA,KAAH,kFAMTa,EAAab,EAAAA,GAAAA,MAAH,0FAMVc,EAAQd,EAAAA,GAAAA,MAAH,uHAOLe,EAAYf,EAAAA,GAAAA,OAAH,sZ,mBC4DtB,EA5EkB,WAChB,OAAwBgB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXnB,GAAWoB,EAAAA,EAAAA,IAAYtB,GAEvBuB,EAAc,SAAAC,GAClB,MAAwBA,EAAEC,OAAlBT,EAAR,EAAQA,KAAMU,EAAd,EAAcA,MACd,OAAQV,GACN,IAAK,OACHC,EAAQS,GACR,MACF,IAAK,SACHP,EAAUO,GACV,MACF,QACE,OAEL,EASKC,EAAa,WACjBV,EAAQ,IACRE,EAAU,GACX,EAED,OACE,SAACT,EAAD,WACE,UAACC,EAAD,CAAWiB,SAfM,SAAAJ,GACnBA,EAAEK,iBACkB3B,EAAS4B,MAAK,SAAAC,GAAO,OAAIA,EAAQf,OAASA,CAArB,IAErCgB,MAAM,GAAD,OAAIhB,EAAJ,6BACLI,GAASa,EAAAA,EAAAA,IAAW,CAAEjB,KAAAA,EAAME,OAAAA,KAChCS,GACD,EAQG,WACE,UAACf,EAAD,mBAEE,SAACC,EAAD,CACEqB,KAAK,OACLlB,KAAK,OACLU,MAAOV,EACPmB,SAAUZ,EACVa,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAIZ,UAAC1B,EAAD,qBAEE,SAACC,EAAD,CACEqB,KAAK,MACLlB,KAAK,SACLU,MAAOR,EACPiB,SAAUZ,EACVa,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAIZ,UAACxB,EAAD,CAAWoB,KAAK,SAAhB,yBAEE,SAAC,MAAD,CACEK,MAAO,CACLC,MAAO,KACPC,OAAQ,KACRC,cAAe,mBAO5B,ECrFYC,EAAkB5C,EAAAA,GAAAA,GAAH,yNAYf6C,EAAe7C,EAAAA,GAAAA,EAAH,iPCZZ8C,EAAU9C,EAAAA,GAAAA,GAAH,sHAOP+C,EAAM/C,EAAAA,GAAAA,OAAH,wWCyBhB,EA5BiB,SAAC,GAA0B,IAAxBgD,EAAuB,EAAvBA,GAAI/B,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OACtBE,GAAWC,EAAAA,EAAAA,MAIjB,OACE,UAACwB,EAAD,YACE,yBAAI7B,EAAJ,QACA,uBAAIE,KACJ,SAAC4B,EAAD,CAAKE,QAAS,kBAPQ,SAAAD,GACxB3B,GAAS6B,EAAAA,EAAAA,IAAcF,GACxB,CAKuBG,CAAkBH,EAAxB,EAAd,UACE,SAAC,MAAD,CACER,MAAO,CACLC,MAAO,KACPC,OAAQ,KACRC,cAAe,gBAM1B,E,UCxBYS,EAAoBpD,EAAAA,GAAAA,IAAH,oJAQjBqD,EAAcrD,EAAAA,GAAAA,MAAH,oJASXc,EAAQd,EAAAA,GAAAA,MAAH,uHCElB,EAjBe,WACb,IAAMqB,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAAC8B,EAAD,WACE,UAACC,EAAD,oCAEE,SAAC,EAAD,CAAOlB,KAAK,OAAOC,SARR,SAAAX,GACfJ,GAASiC,EAAAA,EAAAA,GAAe7B,EAAEC,OAAOC,OAClC,QAUF,ECgCD,EAvCiB,WACf,IAAMN,GAAWC,EAAAA,EAAAA,MACXnB,GAAWoB,EAAAA,EAAAA,IAAYtB,GACvBS,GAAYa,EAAAA,EAAAA,IAAYd,GACxBH,GAASiB,EAAAA,EAAAA,IAAYlB,GAAkBkD,cACvCC,EAAkBrD,EAASG,QAAO,SAAA0B,GAAO,OAC7CA,EAAQf,KAAKsC,cAAcE,SAASnD,EADS,IAGzCoD,EAAgBvD,EAASwD,OACzBC,EAAuBJ,EAAgBG,OAM7C,OAJAE,EAAAA,EAAAA,YAAU,WACRxC,GAASyC,EAAAA,EAAAA,MACV,GAAE,CAACzC,KAGF,8BACIqC,GAGA,iCACE,SAAC,EAAD,IACChD,IAAa,wCACd,UAACkC,EAAD,YACIgB,IACA,SAACf,EAAD,sDAIDW,EAAgBO,KAAI,gBAAGf,EAAH,EAAGA,GAAI/B,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACnB,SAAC,EAAD,CAAmB6B,GAAIA,EAAI/B,KAAMA,EAAME,OAAQA,GAAhC6B,EADI,WAXzB,SAACH,EAAD,0DAmBP,E,QC1Cc,SAASmB,IACtB,IAAMxD,GAAQe,EAAAA,EAAAA,IAAYhB,GAC1B,OACE,gCACGC,IAAS,yEACRA,IACA,UAACT,EAAD,YACE,4CACA,SAAC,EAAD,KACA,sCACA,SAAC,EAAD,SAKT,C","sources":["components/App.styled.js","redux/contacts/selectors.js","components/DataInput/DataInput.styled.js","components/DataInput/DataInput.jsx","components/DataList/DataList.styled.js","components/DataItem/DataItem.styled.js","components/DataItem/DataItem.jsx","components/DataFilter/DataFilter.styled.js","components/DataFilter/DataFilter.jsx","components/DataList/DataList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SectionPhonebook = styled.section`\n  max-width: 400px;\n  padding: 20px;\n  border: 2px solid #53aecf;\n`;\n","export const getContacts = state => state.contacts.items;\n\nexport const getFilterResults = state => state.filter;\n\nexport const getError = state => state.contacts.error;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n","import styled from 'styled-components';\n\nexport const SectionFormInput = styled.div`\n  padding-top: 20px;\n  padding-bottom: 20px;\n  background-color: #ebdf02;\n  border-radius: 4px;\n  font-family: Roboto;\n`;\n\nexport const FormInput = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const LableInput = styled.label`\n  max-width: 200px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Input = styled.input`\n  &:focus {\n    outline: none;\n    border: 2px solid #53aecf;\n    border-radius: 2px;\n  }\n`;\nexport const SubmitBtn = styled.button`\n  width: 100px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-top: 5px;\n  padding-bottom: 5px;\n\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  background-color: #53aecf;\n  scale: 1;\n  transition: background-color 250ms linear;\n  transition: scale 250ms linear;\n\n  font-size: 12px;\n  &:hover {\n    background-color: #42b9d4;\n    scale: 1.1;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/apiService';\nimport {\n  SubmitBtn,\n  LableInput,\n  FormInput,\n  SectionFormInput,\n  Input,\n} from './DataInput.styled';\nimport { AiOutlineUserAdd } from 'react-icons/ai';\n\nconst DataInput = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleInput = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const repeatCheck = contacts.find(contact => contact.name === name);\n    repeatCheck\n      ? alert(`${name} is already in contacts!`)\n      : dispatch(addContact({ name, number }));\n    resetValue();\n  };\n  const resetValue = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <SectionFormInput>\n      <FormInput onSubmit={handleSubmit}>\n        <LableInput>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleInput}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </LableInput>\n\n        <LableInput>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleInput}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </LableInput>\n\n        <SubmitBtn type=\"submit\">\n          Add contact\n          <AiOutlineUserAdd\n            style={{\n              width: '20',\n              height: '20',\n              verticalAlign: 'middle',\n            }}\n          />\n        </SubmitBtn>\n      </FormInput>\n    </SectionFormInput>\n  );\n};\n\nexport default DataInput;\n","import styled from 'styled-components';\n\nexport const SectionContacts = styled.ul`\n  margin-top: 8px;\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  display: flex;\n  flex-direction: column;\n\n  background-color: #ebdf02;\n  border-radius: 4px;\n  font-family: Roboto;\n`;\nexport const Notification = styled.p`\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  display: flex;\n  flex-direction: column;\n\n  background-color: #ebdf02;\n  border-radius: 4px;\n  font-family: Roboto;\n  font-weight: 700;\n  text-align: center;\n`;\n","import styled from 'styled-components';\n\nexport const Contact = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 5px;\n`;\n\nexport const Btn = styled.button`\n  width: 40px;\n  padding-top: 5px;\n  padding-bottom: 5px;\n\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  background-color: #53aecf;\n  scale: 1;\n  transition: background-color 250ms linear;\n  transition: scale 250ms linear;\n\n  font-size: 12px;\n  &:hover {\n    background-color: #42b9d4;\n    scale: 1.1;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/apiService';\nimport { Contact, Btn } from './DataItem.styled';\nimport { AiOutlineUserDelete } from 'react-icons/ai';\n\nconst DataItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const deleteContactById = id => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <Contact>\n      <p>{name}:</p>\n      <p>{number}</p>\n      <Btn onClick={() => deleteContactById(id)}>\n        <AiOutlineUserDelete\n          style={{\n            width: '20',\n            height: '20',\n            verticalAlign: 'middle',\n          }}\n        />\n      </Btn>\n    </Contact>\n  );\n};\n\nDataItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default DataItem;\n","import styled from 'styled-components';\n\nexport const SectionFiltrInput = styled.div`\n  padding-top: 20px;\n  padding-bottom: 20px;\n  background-color: #ebdf02;\n  border-radius: 4px;\n  font-family: Roboto;\n`;\n\nexport const FilterInput = styled.label`\n  max-width: 200px;\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const Input = styled.input`\n  &:focus {\n    outline: none;\n    border: 2px solid #53aecf;\n    border-radius: 2px;\n  }\n`;","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { FilterInput, SectionFiltrInput, Input } from './DataFilter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onFiltre = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <SectionFiltrInput>\n      <FilterInput>\n        Find contacts by Name\n        <Input type=\"text\" onChange={onFiltre} />\n      </FilterInput>\n    </SectionFiltrInput>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchAllContacts } from 'redux/contacts/apiService';\nimport {\n  getContacts,\n  getFilterResults,\n  getIsLoading,\n} from 'redux/contacts/selectors';\nimport { SectionContacts, Notification } from './DataList.styled';\nimport DataItem from 'components/DataItem';\nimport Filter from 'components/DataFilter';\n\nconst DataList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const filter = useSelector(getFilterResults).toLowerCase();\n  const filtredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter)\n  );\n  const totalContacts = contacts.length;\n  const totalFiltredContacts = filtredContacts.length;\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {!totalContacts ? (\n        <Notification>Your phonebook is empty. Add a new contact</Notification>\n      ) : (\n        <>\n          <Filter />\n          {isLoading && <p>Loading....</p>}\n          <SectionContacts>\n            {!totalFiltredContacts && (\n              <Notification>\n                No contacts were found for your request\n              </Notification>\n            )}\n            {filtredContacts.map(({ id, name, number }) => (\n              <DataItem key={id} id={id} name={name} number={number} />\n            ))}\n          </SectionContacts>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default DataList;\n","import { SectionPhonebook } from '../components/App.styled';\nimport { useSelector } from 'react-redux';\nimport DataInput from 'components/DataInput';\nimport DataList from 'components/DataList';\nimport { getError } from 'redux/contacts/selectors';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function Contacts() {\n  const error = useSelector(getError);\n  return (\n    <>\n      {error && <p>Something went wrong, please restart the app</p>}\n      {!error && (\n        <SectionPhonebook>\n          <h2>Your phonebook</h2>\n          <DataInput />\n          <h2>Contacts</h2>\n          <DataList />\n        </SectionPhonebook>\n      )}\n    </>\n  );\n}\n"],"names":["SectionPhonebook","styled","getContacts","state","contacts","items","getFilterResults","filter","getError","error","getIsLoading","isLoading","SectionFormInput","FormInput","LableInput","Input","SubmitBtn","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleInput","e","target","value","resetValue","onSubmit","preventDefault","find","contact","alert","addContact","type","onChange","pattern","title","required","style","width","height","verticalAlign","SectionContacts","Notification","Contact","Btn","id","onClick","deleteContact","deleteContactById","SectionFiltrInput","FilterInput","filterContacts","toLowerCase","filtredContacts","includes","totalContacts","length","totalFiltredContacts","useEffect","fetchAllContacts","map","Contacts"],"sourceRoot":""}