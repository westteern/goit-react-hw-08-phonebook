{"version":3,"file":"static/js/236.1cd5c8c2.chunk.js","mappings":"6PAMaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAAgDN,EAAAA,EAAAA,UAAS,IAAzD,eAAOO,EAAP,KAAyBC,EAAzB,KAEA,GAAkDR,EAAAA,EAAAA,WAAS,GAA3D,eAAOS,EAAP,KAA0BC,EAA1B,KACA,GACEV,EAAAA,EAAAA,WAAS,GADX,eAAOW,EAAP,KAAkCC,EAAlC,KAMMC,EAAc,SAAAC,GAClB,IAAMC,EAAID,EAAME,cAAcf,KACxBgB,EAAQH,EAAME,cAAcC,MAClC,OAAQF,GACN,IAAK,OACHb,EAAQe,GACR,MACF,IAAK,QACHb,EAASa,GACT,MACF,IAAK,WACHX,EAAYW,GACZ,MACF,IAAK,UACHT,EAAoBS,GACpB,MACF,QACE,OAEL,EAgCD,OACE,kBAAMC,SA/Ba,SAAAH,GAEnB,GADAA,EAAEI,iBAES,KAATlB,GACU,KAAVE,GACa,KAAbE,GACqB,KAArBE,EAKF,GAAIF,EAASe,OAAS,EACpBC,EAAAA,GAAAA,MAAY,wDAGd,GAAIhB,IAAaE,EAAjB,CAIA,IAAMe,EAAOP,EAAEC,cACflB,GACEyB,EAAAA,EAAAA,IAAS,CACPtB,KAAAA,EACAE,MAAAA,EACAE,SAAAA,KAGJiB,EAAKE,OATJ,MAFCH,EAAAA,GAAAA,MAAY,+BARZA,EAAAA,GAAAA,MAAY,4BAoBf,EAG+BI,aAAa,MAA3C,WACE,yCAEE,kBAAOC,KAAK,OAAOzB,KAAK,OAAO0B,SAAUd,QAE3C,sCAEE,kBAAOa,KAAK,QAAQzB,KAAK,QAAQ0B,SAAUd,QAE7C,yCAEE,kBACEa,KAAMjB,EAAoB,OAAS,WACnCR,KAAK,WACL0B,SAAUd,KAEZ,mBAAQa,KAAK,SAASE,QAxEE,kBAAMlB,GAAqB,SAAAmB,GAAO,OAAKA,CAAL,GAAlC,EAwExB,yBAIF,iDAEE,kBACEH,KAAMf,EAA4B,OAAS,WAC3CV,KAAK,UACL0B,SAAUd,QAGd,mBAAQa,KAAK,SAASE,QAnFY,kBACpChB,GAA6B,SAAAiB,GAAO,OAAKA,CAAL,GADA,EAmFlC,sBAGA,mBAAQH,KAAK,SAAb,wBAGL,ECxGc,SAASI,IACtB,OACE,4BACE,0BACE,+CAEF,SAACjC,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { register } from 'redux/auth/service';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [passVerification, setPassVerification] = useState('');\n\n  const [isVisiblePassword, setIsVisiblePassword] = useState(false);\n  const [isVisiblePassVerification, setIsVisiblePassVerification] =\n    useState(false);\n  const handleVisiblePassword = () => setIsVisiblePassword(visible => !visible);\n  const handleVisiblePassVerification = () =>\n    setIsVisiblePassVerification(visible => !visible);\n\n  const handleInput = event => {\n    const e = event.currentTarget.name;\n    const value = event.currentTarget.value;\n    switch (e) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      case 'confirm':\n        setPassVerification(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (\n      name === '' ||\n      email === '' ||\n      password === '' ||\n      passVerification === ''\n    ) {\n      toast.error('All fields must be filled');\n      return;\n    }\n    if (password.length < 8) {\n      toast.error('The password must contain at least 8 characters');\n      return;\n    }\n    if (password !== passVerification) {\n      toast.error('Passwords do not match');\n      return;\n    }\n    const form = e.currentTarget;\n    dispatch(\n      register({\n        name,\n        email,\n        password,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <label>\n        Username\n        <input type=\"text\" name=\"name\" onChange={handleInput} />\n      </label>\n      <label>\n        Email\n        <input type=\"email\" name=\"email\" onChange={handleInput} />\n      </label>\n      <label>\n        Password\n        <input\n          type={isVisiblePassword ? 'text' : 'password'}\n          name=\"password\"\n          onChange={handleInput}\n        />\n        <button type=\"button\" onClick={handleVisiblePassword}>\n          Visible\n        </button>\n      </label>\n      <label>\n        Confirm password\n        <input\n          type={isVisiblePassVerification ? 'text' : 'password'}\n          name=\"confirm\"\n          onChange={handleInput}\n        />\n      </label>\n      <button type=\"button\" onClick={handleVisiblePassVerification}>\n        Visible\n      </button>\n      <button type=\"submit\">Register</button>\n    </form>\n  );\n};\n","import { RegisterForm } from '../components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <div>\n        <title>Registration</title>\n      </div>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["RegisterForm","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","passVerification","setPassVerification","isVisiblePassword","setIsVisiblePassword","isVisiblePassVerification","setIsVisiblePassVerification","handleInput","event","e","currentTarget","value","onSubmit","preventDefault","length","toast","form","register","reset","autoComplete","type","onChange","onClick","visible","Register"],"sourceRoot":""}